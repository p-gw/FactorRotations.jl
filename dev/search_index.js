var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FactorRotations","category":"page"},{"location":"#FactorRotations","page":"Home","title":"FactorRotations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FactorRotations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [FactorRotations]","category":"page"},{"location":"#FactorRotations.CrawfordFerguson","page":"Home","title":"FactorRotations.CrawfordFerguson","text":"CrawfordFerguson(; kappa, orthogonal = false)\n\nThe family of Crawford-Ferguson rotation methods.\n\nKeyword arguments\n\nkappa: T\n\nDetails\n\nThe Crawford-Ferguson family allows both orthogonal and oblique rotation of the p-byk-factor loading matrix. If orthogonal rotation is performed, Crawford-Ferguson is equivalent to Oblimin rotation given the following values for kappa:\n\nkappa = 0: Quartimax\nkappa = 1/p: Varimax\nkappa = k/2p: Equamax\nkappa = (k - 1)/(p + k - 2): Parsimax\nkappa = 1: Factor parsimony\n\n\n\n\n\n","category":"type"},{"location":"#FactorRotations.MinimumEntropy","page":"Home","title":"FactorRotations.MinimumEntropy","text":"minetropy\n\n\n\n\n\n","category":"type"},{"location":"#FactorRotations.Oblimin","page":"Home","title":"FactorRotations.Oblimin","text":"Oblimin(; gamma, orthogonal = false)\n\nThe family of Oblimin rotation methods.\n\nKeyword arguments\n\ngamma: The shape parameter determining the rotation criterion (see Details).\northogonal: If orthogonal = true an orthogonal rotation is performed, an oblique  rotation otherwise. (default: false`)\n\nDetails\n\nThe Oblimin rotation family allow orthogonal as well as oblique rotation of the factor loading matrix. If orthogonal rotation is performed, Oblimin is equivalent to the following rotation methods given a value for gamma:\n\ngamma = 0: Quartimax\ngamma = 0.5: Biquartimax\ngamma = 1: Varimax\ngamma = p/2: Equamax (where p is the number of columns in the factor loading matrix)\n\nFor oblique rotation Oblimin is equivalent to the following rotation methods:\n\ngamma = 0: Quartimin\ngamma = 0.5: Biquartimin\n\nExamples\n\njulia> Oblimin(gamma = 0.5)\nOblimin{Oblique, Float64}(0.5)\n\njulia> Oblimin(gamma = 1, orthogonal = true)\nOblimin{Orthogonal, Int64}(1)\n\n\n\n\n\n","category":"type"},{"location":"#FactorRotations.Oblique","page":"Home","title":"FactorRotations.Oblique","text":"Oblique\n\nA type representing an oblique rotation type.\n\n\n\n\n\n","category":"type"},{"location":"#FactorRotations.Orthogonal","page":"Home","title":"FactorRotations.Orthogonal","text":"Orthogonal\n\nA type representing an orthogonal rotation type.\n\n\n\n\n\n","category":"type"},{"location":"#FactorRotations.Quartimax","page":"Home","title":"FactorRotations.Quartimax","text":"Quartimax\n\n\n\n\n\n","category":"type"},{"location":"#FactorRotations.RotationMethod","page":"Home","title":"FactorRotations.RotationMethod","text":"RotationMethod{T<:RotationType}\n\nAn abstract type representing a factor rotation method.\n\nEach implementation of M <: RotationMethod must implement criterion_and_gradient.\n\n\n\n\n\n","category":"type"},{"location":"#FactorRotations.RotationType","page":"Home","title":"FactorRotations.RotationType","text":"RotationType\n\nAn abstract type representing a type of factor rotation.\n\n\n\n\n\n","category":"type"},{"location":"#FactorRotations.criterion_and_gradient","page":"Home","title":"FactorRotations.criterion_and_gradient","text":"criterion_and_gradient(method::RotationMethod, Λ::AbstractMatrix{<:Real})\n\nCalculate the criterion and gradient of a given method with respect to the factor loading matrix Λ.\n\nReturns a Tuple with the criterion value as the first element and gradient as the second element.\n\n\n\n\n\n","category":"function"},{"location":"#FactorRotations.rotate-Tuple","page":"Home","title":"FactorRotations.rotate","text":"rotate(Λ, method::RotationMethod, kwargs...)\n\nPerform a rotation of the factor loading matrix Λ.\n\nKeyword arguments\n\natol:\nalpha:\nmaxiter1:\nmaxiter2:\ninit: A p-by-p matrix of starting values for the algorithm.         If init = nothing (the default), random starting values will be generated.\n\n\n\n\n\n","category":"method"}]
}
