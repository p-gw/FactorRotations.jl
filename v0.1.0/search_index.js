var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = FactorRotations","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Rotation-criteria","page":"API","title":"Rotation criteria","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Biquartimax\nCrawfordFerguson\nInfomax\nMinimumEntropy\nMinimumEntropyRatio\nOblimax\nOblimin\nQuartimax\nTargetRotation\nVarimax","category":"page"},{"location":"api/#FactorRotations.Biquartimax","page":"API","title":"FactorRotations.Biquartimax","text":"Biquartimax()\n\nThe Biquartimax rotation method.\n\nDetails\n\nThe Biquartimax rotation method is a special case of the Oblimin rotation with parameters gamma = 0.5 and orthogonal = true.\n\nExamples\n\njulia> L = [\n           0.830 -0.396\n           0.818 -0.469\n           0.777 -0.470\n           0.798 -0.401\n           0.786  0.500\n           0.672  0.458\n           0.594  0.444\n           0.647  0.333\n       ];\n\njulia> L_biquartimax = rotate(L, Biquartimax());\n┌ Info: Rotation algorithm converged after 11 iterations.\n│       algorithm: Oblimin{Orthogonal, Float64}\n└       criterion: -0.14321695254980626\n\njulia> L_oblimin = rotate(L, Oblimin(gamma = 0.5, orthogonal = true));\n┌ Info: Rotation algorithm converged after 11 iterations.\n│       algorithm: Oblimin{Orthogonal, Float64}\n└       criterion: -0.14321695254980626\n\njulia> L_biquartimax ≈ L_oblimin\ntrue\n\n\n\n\n\n","category":"function"},{"location":"api/#FactorRotations.CrawfordFerguson","page":"API","title":"FactorRotations.CrawfordFerguson","text":"CrawfordFerguson(; kappa, orthogonal = false)\n\nThe family of Crawford-Ferguson rotation methods.\n\nKeyword arguments\n\nkappa: The parameter determining the rotation criterion (see Details).\northogonal: orthogonal: If orthogonal = true an orthogonal rotation is performed, an               oblique rotation otherwise. (default: false)\n\nDetails\n\nThe Crawford-Ferguson family allows both orthogonal and oblique rotation of the p-byk-factor loading matrix. If orthogonal rotation is performed, Crawford-Ferguson is equivalent to Oblimin rotation given the following values for kappa:\n\nkappa = 0 → Quartimax\nkappa = 1/p → Varimax\nkappa = k/2p → Equamax\nkappa = (k - 1)/(p + k - 2) → Parsimax\nkappa = 1 → Factor parsimony\n\nExamples\n\njulia> CrawfordFerguson(kappa = 0, orthogonal = true)\nCrawfordFerguson{Orthogonal, Int64}(0)\n\njulia> CrawfordFerguson(kappa = 1/2, orthogonal = false)\nCrawfordFerguson{Oblique, Float64}(0.5)\n\n\n\n\n\n","category":"type"},{"location":"api/#FactorRotations.Infomax","page":"API","title":"FactorRotations.Infomax","text":"Infomax(; orthogonal = false)\n\nThe Infomax rotation method.\n\nKeyword arguments\n\northogonal: If orthogonal = true an orthogonal rotation is performed, an oblique  rotation otherwise. (default: false)\n\n\n\n\n\n","category":"type"},{"location":"api/#FactorRotations.MinimumEntropy","page":"API","title":"FactorRotations.MinimumEntropy","text":"MinimumEntropy()\n\nThe Minimum Entropy rotation method.\n\n\n\n\n\n","category":"type"},{"location":"api/#FactorRotations.MinimumEntropyRatio","page":"API","title":"FactorRotations.MinimumEntropyRatio","text":"MinimumEntropyRatio()\n\nThe Minimum Entropy Ratio rotation method.\n\n\n\n\n\n","category":"type"},{"location":"api/#FactorRotations.Oblimax","page":"API","title":"FactorRotations.Oblimax","text":"Oblimax(; orthogonal = false)\n\nThe Oblimax rotation method.\n\nKeyword arguments\n\northogonal: If orthogonal = true an orthogonal rotation is performed, an oblique  rotation otherwise. (default: false)\n\nDetails\n\nThe Oblimax rotation method is equivalent to Quartimax for orthogonal rotation.\n\nExamples\n\njulia> L = [\n           0.830 -0.396\n           0.818 -0.469\n           0.777 -0.470\n           0.798 -0.401\n           0.786  0.500\n           0.672  0.458\n           0.594  0.444\n           0.647  0.333\n       ];\n\njulia> L_oblimax = rotate(L, Oblimax(orthogonal = true));\n┌ Info: Rotation algorithm converged after 15 iterations.\n│       algorithm: Oblimax{Orthogonal}\n└       criterion: 2.1632611287219916\n\njulia> L_quartimax = rotate(L, Quartimax());\n┌ Info: Rotation algorithm converged after 13 iterations.\n│       algorithm: Quartimax\n└       criterion: -1.0227347961934472\n\njulia> isapprox(L_oblimax, L_quartimax, atol = 1e-6)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#FactorRotations.Oblimin","page":"API","title":"FactorRotations.Oblimin","text":"Oblimin(; gamma, orthogonal = false)\n\nThe family of Oblimin rotation methods.\n\nKeyword arguments\n\ngamma: The shape parameter determining the rotation criterion (see Details).\northogonal: If orthogonal = true an orthogonal rotation is performed, an oblique  rotation otherwise. (default: false)\n\nDetails\n\nThe Oblimin rotation family allow orthogonal as well as oblique rotation of the factor loading matrix. If orthogonal rotation is performed, Oblimin is equivalent to the following rotation methods given a value for gamma:\n\ngamma = 0 → Quartimax\ngamma = 0.5 → Biquartimax\ngamma = 1 → Varimax\ngamma = p/2 → Equamax\n\nFor oblique rotation Oblimin is equivalent to the following rotation methods:\n\ngamma = 0 → Quartimin\ngamma = 0.5 → Biquartimin\n\nExamples\n\njulia> Oblimin(gamma = 0.5)\nOblimin{Oblique, Float64}(0.5)\n\njulia> Oblimin(gamma = 1, orthogonal = true)\nOblimin{Orthogonal, Int64}(1)\n\n\n\n\n\n","category":"type"},{"location":"api/#FactorRotations.Quartimax","page":"API","title":"FactorRotations.Quartimax","text":"Quartimax()\n\nThe Quartimax rotation criterion.\n\nDetails\n\nThe Quartimax criterion is a special case of the Oblimin rotation criterion with parameter gamma = 0.\n\nExamples\n\nSetting up the criterion\n\njulia> Quartimax()\nQuartimax()\n\nTesting equivalence of Quartimax and Oblimin\n\njulia> L = [\n           0.830 -0.396\n           0.818 -0.469\n           0.777 -0.470\n           0.798 -0.401\n           0.786  0.500\n           0.672  0.458\n           0.594  0.444\n           0.647  0.333\n       ];\n\njulia> L_quartimax = rotate(L, Quartimax());\n┌ Info: Rotation algorithm converged after 13 iterations.\n│       algorithm: Quartimax\n└       criterion: -1.0227347961934468\n\njulia> L_oblimin = rotate(L, Oblimin(gamma = 0, orthogonal = true));\n┌ Info: Rotation algorithm converged after 13 iterations.\n│       algorithm: Oblimin{Orthogonal, Int64}\n└       criterion: 0.1260609090703036\n\njulia> L_quartimax ≈ L_oblimin\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#FactorRotations.TargetRotation","page":"API","title":"FactorRotations.TargetRotation","text":"TargetRotation(target::AbstractMatrix; orthogonal = false)\n\nThe (partial) target rotation criterion.\n\nKeyword arguments\n\northogonal: If orthogonal = true an orthogonal rotation is performed, an oblique  rotation otherwise. (default: false)\n\nDetails\n\nTarget rotation rotates a factor loading matrix towards the target matrix, target. For a fully specified target matrix (e.g. all entries in the matrix are numbers), full target rotation is performed.\n\nPartially specified target rotation can be achieved setting the unspecified entries in the target matrix to missing.\n\nExamples\n\nFull target rotation\n\njulia> L = [\n           0.830 -0.396\n           0.818 -0.469\n           0.777 -0.470\n           0.798 -0.401\n           0.786  0.500\n           0.672  0.458\n           0.594  0.444\n           0.647  0.333\n       ];\n\njulia> target = [1 0; 1 0; 1 0; 1 0; 0 1; 0 1; 0 1; 0 1];\n\njulia> rotate(L, TargetRotation(target, orthogonal = true))\n┌ Info: Rotation algorithm converged after 9 iterations.\n│       algorithm: TargetRotation{Orthogonal, Matrix{Int64}}\n└       criterion: 0.3306828147982428\n8×2 Matrix{Float64}:\n 0.882633  0.258215\n 0.922358  0.195806\n 0.892467  0.167726\n 0.862116  0.233154\n 0.252473  0.89669\n 0.195508  0.789382\n 0.146707  0.726945\n 0.260213  0.679549\n\nPartially specified target rotation\n\njulia> L = [\n           0.830 -0.396\n           0.818 -0.469\n           0.777 -0.470\n           0.798 -0.401\n           0.786  0.500\n           0.672  0.458\n           0.594  0.444\n           0.647  0.333\n       ];\n\njulia> target = [1 0; missing missing; 1 0; 1 0; 0 1; 0 1; 0 1; 0 1];\n\njulia> rotate(L, TargetRotation(target, orthogonal = true))\n┌ Info: Rotation algorithm converged after 13 iterations.\n│       algorithm: TargetRotation{Orthogonal, Matrix{Union{Missing, Int64}}}\n└       criterion: 0.30515405794256284\n8×2 Matrix{Float64}:\n 0.873299  0.288209\n 0.915133  0.227193\n 0.886218  0.198109\n 0.85365   0.262462\n 0.221701  0.90479\n 0.168434  0.795599\n 0.121793  0.731532\n 0.236852  0.68804\n\n\n\n\n\n","category":"type"},{"location":"api/#FactorRotations.Varimax","page":"API","title":"FactorRotations.Varimax","text":"Varimax()\n\nThe Varimax rotation criterion.\n\nDetails\n\nThe Varimax criterion is a special case of the Oblimin rotation criterion with parameter gamma = 1.\n\nExamples\n\nSetting up the criterion\n\njulia> Varimax()\nVarimax()\n\nTesting equivalence of Varimax and Oblimin\n\njulia> L = [\n           0.830 -0.396\n           0.818 -0.469\n           0.777 -0.470\n           0.798 -0.401\n           0.786  0.500\n           0.672  0.458\n           0.594  0.444\n           0.647  0.333\n       ];\n\njulia> L_varimax = rotate(L, Varimax());\n┌ Info: Rotation algorithm converged after 9 iterations.\n│       algorithm: Varimax\n└       criterion: -0.4515671564134383\n\njulia> L_oblimin = rotate(L, Oblimin(gamma = 1, orthogonal = true));\n┌ Info: Rotation algorithm converged after 9 iterations.\n│       algorithm: Oblimin{Orthogonal, Int64}\n└       criterion: -0.4149267008747196\n\njulia> L_varimax ≈ L_oblimin\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#User-Interface","page":"API","title":"User Interface","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"rotate\nrotate!\nisorthogonal\nisoblique","category":"page"},{"location":"api/#FactorRotations.rotate","page":"API","title":"FactorRotations.rotate","text":"rotate(Λ, method::RotationMethod; kwargs...)\n\nPerform a rotation of the factor loading matrix Λ using a rotation method.\n\nKeyword arguments\n\natol: Sets the absolute tolerance for convergence of the algorithm (default: 1e-6).\nalpha: Sets the inital value for alpha (default: 1).\nmaxiter1: Controls the number of maximum iterations in the outer loop of the algorithm             (default: 1000).\nmaxiter2: Controls the number of maximum iterations in the inner loop of the algorithm             (default: 10).\ninit: A k-by-k matrix of starting values for the algorithm.         If init = nothing (the default), the identity matrix will be used as starting         values.\n\nExamples\n\njulia> L = [\n           0.830 -0.396\n           0.818 -0.469\n           0.777 -0.470\n           0.798 -0.401\n           0.786  0.500\n           0.672  0.458\n           0.594  0.444\n           0.647  0.333\n       ];\n\njulia> rotate(L, Varimax())\n┌ Info: Rotation algorithm converged after 9 iterations.\n│       algorithm: Varimax\n└       criterion: -0.4515671564134383\n8×2 Matrix{Float64}:\n 0.886061  0.246196\n 0.924934  0.183253\n 0.894664  0.155581\n 0.865205  0.221416\n 0.264636  0.893176\n 0.206218  0.786653\n 0.156572  0.724884\n 0.269424  0.67595\n\n\n\n\n\n\n","category":"function"},{"location":"api/#LinearAlgebra.rotate!","page":"API","title":"LinearAlgebra.rotate!","text":"rotate!(Λ, method::RotationMethod; kwargs...)\n\nPerform a rotation of the factor loading matrix Λ and overwrite Λ with the rotated loading matrix.\n\nFor a list of available keyword arguments see rotate.\n\nExamples\n\njulia> L = [\n           0.830 -0.396\n           0.818 -0.469\n           0.777 -0.470\n           0.798 -0.401\n           0.786  0.500\n           0.672  0.458\n           0.594  0.444\n           0.647  0.333\n       ];\n\njulia> rotate!(L, Quartimax())\n┌ Info: Rotation algorithm converged after 13 iterations.\n│       algorithm: Quartimax\n└       criterion: -1.0227347961934472\n8×2 Matrix{Float64}:\n 0.898755  0.194823\n 0.933943  0.129748\n 0.902132  0.103864\n 0.876508  0.171284\n 0.315572  0.876476\n 0.251124  0.773489\n 0.198008  0.714678\n 0.307858  0.659334\n\n\n\n\n\n\n","category":"function"},{"location":"api/#FactorRotations.isorthogonal","page":"API","title":"FactorRotations.isorthogonal","text":"isorthogonal(::RotationMethod)\n\nChecks if the supplied rotation method is orthogonal.\n\nExamples\n\njulia> isorthogonal(Varimax())\ntrue\n\njulia> isorthogonal(Oblimax(orthogonal = false))\nfalse\n\n\n\n\n\n","category":"function"},{"location":"api/#FactorRotations.isoblique","page":"API","title":"FactorRotations.isoblique","text":"isoblique(::RotationMethod)\n\nChecks if the supplied rotation method is oblique.\n\nExamples\n\njulia> isoblique(Varimax())\nfalse\n\njulia> isoblique(Oblimax(orthogonal = false))\ntrue\n\n\n\n\n\n","category":"function"},{"location":"api/#Internals","page":"API","title":"Internals","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"criterion_and_gradient","category":"page"},{"location":"api/#FactorRotations.criterion_and_gradient","page":"API","title":"FactorRotations.criterion_and_gradient","text":"criterion_and_gradient(method::RotationMethod, Λ::AbstractMatrix{<:Real})\n\nCalculate the criterion and gradient of a given method with respect to the factor loading matrix Λ.\n\nReturns a Tuple with the criterion value as the first element and gradient as the second element.\n\n\n\n\n\n","category":"function"},{"location":"guides/basic_usage/#Rotate-an-existing-loading-matrix","page":"Rotate an existing loading matrix","title":"Rotate an existing loading matrix","text":"","category":"section"},{"location":"guides/basic_usage/","page":"Rotate an existing loading matrix","title":"Rotate an existing loading matrix","text":"This guide considers the basic use case of FactorRotations.jl: Given an existing factor loading matrix L, calculate the rotation of the loading matrix according to some rotation criterion. In this example we will first consider the simple case of orthogonal Varimax rotation. At a later stage we will see how to easily switch the factor rotation criterion to arrive at a different rotation.","category":"page"},{"location":"guides/basic_usage/","page":"Rotate an existing loading matrix","title":"Rotate an existing loading matrix","text":"First, we assume a factor loading matrix L.  In this example we will use the loading matrix given by Bernaard & Jennrich (2005),","category":"page"},{"location":"guides/basic_usage/","page":"Rotate an existing loading matrix","title":"Rotate an existing loading matrix","text":"julia> using FactorRotations\n\njulia> L = [\n           0.830 -0.396\n           0.818 -0.469\n           0.777 -0.470\n           0.798 -0.401\n           0.786  0.500\n           0.672  0.458\n           0.594  0.444\n           0.647  0.333\n       ]\n8×2 Matrix{Float64}:\n 0.83   -0.396\n 0.818  -0.469\n 0.777  -0.47\n 0.798  -0.401\n 0.786   0.5\n 0.672   0.458\n 0.594   0.444\n 0.647   0.333","category":"page"},{"location":"guides/basic_usage/","page":"Rotate an existing loading matrix","title":"Rotate an existing loading matrix","text":"Rotating the loading matrix consists of a single call to rotate. This function takes the unrotated loading matrix as the first argument, and an instance of a factor rotation method as a second argument.","category":"page"},{"location":"guides/basic_usage/","page":"Rotate an existing loading matrix","title":"Rotate an existing loading matrix","text":"For clarity we first set up our Varimax rotation method,","category":"page"},{"location":"guides/basic_usage/","page":"Rotate an existing loading matrix","title":"Rotate an existing loading matrix","text":"julia> criterion = Varimax()\nVarimax()","category":"page"},{"location":"guides/basic_usage/","page":"Rotate an existing loading matrix","title":"Rotate an existing loading matrix","text":"Finally we perform the rotation using rotate,","category":"page"},{"location":"guides/basic_usage/","page":"Rotate an existing loading matrix","title":"Rotate an existing loading matrix","text":"julia> L_rotated = rotate(L, criterion)\n┌ Info: Rotation algorithm converged after 9 iterations.\n│       algorithm: Varimax\n└       criterion: -0.4515671564134383\n8×2 Matrix{Float64}:\n 0.886061  0.246196\n 0.924934  0.183253\n 0.894664  0.155581\n 0.865205  0.221416\n 0.264636  0.893176\n 0.206218  0.786653\n 0.156572  0.724884\n 0.269424  0.67595","category":"page"},{"location":"guides/basic_usage/","page":"Rotate an existing loading matrix","title":"Rotate an existing loading matrix","text":"Different rotation can be achieved by simply changing criterion or passing it directly to rotate.","category":"page"},{"location":"guides/basic_usage/","page":"Rotate an existing loading matrix","title":"Rotate an existing loading matrix","text":"julia> L_rotated = rotate(L, MinimumEntropy())\n┌ Info: Rotation algorithm converged after 9 iterations.\n│       algorithm: MinimumEntropy\n└       criterion: 1.4822946782415076\n8×2 Matrix{Float64}:\n 0.90711   0.151221\n 0.939117  0.084524\n 0.906093  0.0602051\n 0.883753  0.128783\n 0.357504  0.860225\n 0.28816   0.760468\n 0.232268  0.704289\n 0.339319  0.643709 ","category":"page"},{"location":"guides/basic_usage/#In-place-rotation","page":"Rotate an existing loading matrix","title":"In-place rotation","text":"","category":"section"},{"location":"guides/basic_usage/","page":"Rotate an existing loading matrix","title":"Rotate an existing loading matrix","text":"In some cases it can be useful to modify L directly.  For this use case the package provides an in-place rotation, rotate! with the same function signature as before.","category":"page"},{"location":"guides/basic_usage/","page":"Rotate an existing loading matrix","title":"Rotate an existing loading matrix","text":"julia> rotate!(L, MinimumEntropy())\n┌ Info: Rotation algorithm converged after 9 iterations.\n│       algorithm: MinimumEntropy\n└       criterion: 1.4822946782415076\n8×2 Matrix{Float64}:\n 0.90711   0.151221\n 0.939117  0.084524\n 0.906093  0.0602051\n 0.883753  0.128783\n 0.357504  0.860225\n 0.28816   0.760468\n 0.232268  0.704289\n 0.339319  0.643709 \n\njulia> L == L_rotated\ntrue","category":"page"},{"location":"rotation_methods/#Rotation-Criteria","page":"Rotation Methods","title":"Rotation Criteria","text":"","category":"section"},{"location":"rotation_methods/","page":"Rotation Methods","title":"Rotation Methods","text":"FactorRotations.jl implements both orthogonal and oblique rotation criteria. The following tables list the available methods and their respective references.","category":"page"},{"location":"rotation_methods/#Orthogonal-rotation-criteria","page":"Rotation Methods","title":"Orthogonal rotation criteria","text":"","category":"section"},{"location":"rotation_methods/","page":"Rotation Methods","title":"Rotation Methods","text":"criterium reference note\nBiquartimax  equivalent to Oblimin(gamma = 0.5, orthogonal = true)\nCrawfordFerguson Crawford & Ferguson (1970) \nInfomax Browne (2001) based on the unpublished manuscript McKeon (1968)\nMinimumEntropyRatio McCammon (1966) \nMinimumEntropy Jennrich (2004) \nOblimax  \nOblimin  equivalent to Oblimin for orthogonal rotation\nQuartimax Neuhaus & Wrigley (1954) equivalent to Oblimin(gamma = 0, orthogonal = true)\nTargetRotation  \nVarimax Kaiser (1958) equivalent to Oblimin(gamma = 1, orthogonal = true)","category":"page"},{"location":"rotation_methods/#References","page":"Rotation Methods","title":"References","text":"","category":"section"},{"location":"rotation_methods/","page":"Rotation Methods","title":"Rotation Methods","text":"Browne, M. W. (2001). An overview of analytic rotation in exploratory factor analysis. Multivariate behavioral research, 36(1), 111-150.","category":"page"},{"location":"rotation_methods/","page":"Rotation Methods","title":"Rotation Methods","text":"Crawford, C. B., & Ferguson, G. A. (1970). A general rotation criterion and its use in orthogonal rotation. Psychometrika, 35, 321-332.","category":"page"},{"location":"rotation_methods/","page":"Rotation Methods","title":"Rotation Methods","text":"Kaiser, H. F. (1958). The varimax criterion for analytic rotation in factor analysis. Psychometrika, 23(3), 187-200.","category":"page"},{"location":"rotation_methods/","page":"Rotation Methods","title":"Rotation Methods","text":"Jennrich, R. I. (2004). Rotation to simple loadings using component loss functions: The orthogonal case. Psychometrika, 69, 257-273.","category":"page"},{"location":"rotation_methods/","page":"Rotation Methods","title":"Rotation Methods","text":"McCammon, R. B. (1966). Principal components analysis and its application in large-scale correlation studies. Journal of Geology, 74, 721-733.","category":"page"},{"location":"rotation_methods/","page":"Rotation Methods","title":"Rotation Methods","text":"Neuhaus, J. O., & Wrigley, C. (1954). The quartimax method: An analytic approach to orthogonal simple structure. British Journal of Statistical Psychology, 7(2), 81-91.","category":"page"},{"location":"#FactorRotations.jl","page":"Home","title":"FactorRotations.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"FactorRotations.jl implements factor rotations by the gradient projections algorithms described by Bernaards & Jennrich (2005).","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install FactorRotations.jl you can use the Julia package manager,","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add https://github.com/p-gw/FactorRotations.jl.git","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FactorRotations.jl provides methods to rotate factor loading matrices, e.g. from  exploratory factor analysis or principle component analysis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Assume you aquired a factor loading matrix L then you can rotate the matrix by calling the rotate function. The rotate function takes the factor loading matrix as the first argument and an instance of a rotation method as the second argument.","category":"page"},{"location":"","page":"Home","title":"Home","text":"L = [\n    0.830 -0.396\n    0.818 -0.469\n    0.777 -0.470\n    0.798 -0.401\n    0.786  0.500\n    0.672  0.458\n    0.594  0.444\n    0.647  0.333\n]\n\nrotate(L, Varimax())","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a complete list of available methods see the Rotation Methods section of the documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For a fully worked example see the Guides section of the documentation.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Bernaards, C. A., & Jennrich, R. I. (2005). Gradient projection algorithms and software for arbitrary rotation criteria in factor analysis. Educational and psychological measurement, 65(5), 676-696.","category":"page"},{"location":"guides/#Guides","page":"Guides","title":"Guides","text":"","category":"section"},{"location":"guides/","page":"Guides","title":"Guides","text":"Rotate an existing loading matrix","category":"page"}]
}
